Mailbox
---------
   Mailbox has a queue to store and process the messages in a FIFO fashion
Dispatcher
----------
   -> The Dispatcher just gets the message from the ActorRef and passes it on to the MailBox.
   -> But there's one amazing thing happening behind the scenes :
	     - The Dispatcher wraps an ExecutorService (ForkJoinPool or ThreadPoolExecutor). 
	       It executes the MailBox against this ExecutorService.
		

      Dispatcher Snippet
      ------------------
          protected[akka] override def registerForExecution(mbox: Mailbox, ...): Boolean = {  
		   ...
  		  try {
  		      executorService execute mbox
 		   ...
		}

     Mailbox Snippet
     ----------------
           -> The Executor runs the MailBox, the MailBox must be a Thread
           -> Signature
               private[akka] abstract class Mailbox(val messageQueue: MessageQueue) extends SystemMessageQueue with Runnable

	
SupervisorStratergy
---------------------
   1. OneForOneStrategy (example: some translations in different language)
          - It will stop or restart or ..  child actor which throwed execption 
   2. AllForOneStrategy (example: mergesort algorithm to merging files in hardisk)
          - It will stop or .. all actors. In merge sorting if execption occurs it cause problem to other actors 
                                            that's we are stopping the all actors. In this scenario, restarting an actor nothing cause good.  
   -> DIRECTIVES
    -----------
    1. stop
    2. Resume
    3. Restart
    4. Escalate
  
   -> DEFAULT STRATEGY
      -----------------
      OneForOneStrategy is the default strategy:
	      ActorInitializationException=> Stop
	      ActorKilledException        => Stop
	      DeathPactException             => Stop
	      Exception                   => Restart

Routing
----------
    RoundRobinPool and RoundRobinGroup
    RandomPool     and RandomGroup
    BalancingPool
    SmallestMailboxPool
    BroadcastPool  and BroadcastGroup
    ScatterGatherFirstCompletedPool and ScatterGatherFirstCompletedGroup
    TailChoppingPool      and TailChoppingGroup
    ConsistentHashingPool and ConsistentHashingGroup
    
    

Akka-clustering
__________________

1. Distributed Publish Subscribe in cluster
--------------------------------------------------     
            1. send a message to an actor without knowing which node it is running on
            2. send messages to all actors in the cluster that have registered interest in a named topic

      Two different modes of message delivery
            - Publish
            - Send

   Publish 
   ---------
       Usage : A chat room in an instant messaging application
      
       Actors are registered to a named topic. The message will be delivered to all subscribers of the topic.
       For efficiency the message is sent over the wire only once per node and then delivered to all subscribers of the local topic 		representation.
  
   Send 
   ------
        Usage :  Private chat to one other user in an instant messaging application.                

2. Cluster Client
---------------------
          An actor system that is not part of the cluster can communicate with actors somewhere in the cluster via this ClusterClient.


3. Cluster Sharding (CHECK NOTEBOOK For reference diagram)
--------------------
   - To distribute actors across several nodes in the cluster and want to be able to interact with them using their logical identifier
   - Cluster sharding is typically used when you have many stateful actors that together consume more resources
     than fit on one machine. If you only have a few stateful actors it might be easier to run them on a Cluster Singleton node.
    

 note :
    - automatic distribution
    - no need to know who is where
    - no need to know how many nodes are there
    - rebalancing
    - migration  
   Shard :
    -------
          - group of entries
          - managed together
          - entry = sharded actor
   Shard actor
   -------------
          - create entries
          - supervise entries
          - not used directly by us
  ShardRegion actor
  ------------------
          - supervises shards
          - one per node
          - has entry identifier
          - has shard identifier

  A Shard Coordinator
  --------------------
          - cluster singleton
          - ShardRegions ask him about Shard Location
          - pluggable allocation strategy
          - shard locations are persisted
  Allocation Strategy
  -------------------
          - can be plugged in to shard coordinator
          - is used during rebalancing of shards

4. Cluster Metrics Extension
------------------------------

5. Distributed Data  (CHECK NOTEBOOK For reference diagram)
-------------------
       To share data between nodes in an Akka Cluster.
       1. Receiver.Update
          ---------------
            WriteLocal  (write Value to local replica and return. Then in background it will replicated to all nodes)
	    WriteTo(n)  (write Value to given number of replicas )
            WriteMajority (write value to majority of replicas)
	    WriteAll  (write value to all nodes replicas )
       2. Receiver.GET
          ------------
            ReadLocal
	    ReadTo(n) 
            ReadMajority
	    ReadAll

      Data Types
      -------------
          You can use your own custom ReplicatedData types, and several types are provided by this package, such as:

		1. Counters  --> GCounter,     (GCounter[Grow only Counter] supports increments, no decrements.)
			         PNCounter     (PNCounter[Positive/Negative Counter] supports both increments and decrements )
	
		2. Sets      --> GSet,         (GSet[Grow-only Set]. To add elements to a set and not remove elements )
    			         ORSet         (ORSet[Observed Remove set]. To add and remove operations)

		3. Maps      --> ORMap,        (ORMap[Observed Renove Map], map with String keys and the values are ReplicatedData types )
                                 ORMultiMap,   (ORMultiMap[Observed-Remove Multi-Map],  multi-map implementation that wraps an ORMap with 
                                                an ORSet for the map's value)
                                 LWWMap,       (LWWMap[Last Writer Wins Map], specialized ORMap with LWWRegister)
                                 PNCounterMap  (PNCounterMap[Positive/Negative CounterMap] specialized ORMap with PNCounter values)

		4. Registers --> LWWRegister,  ([Last Writer Wins Register], hold any (serializable) value)
                                 Flag          (Flag is a data type for a boolean value that is initialized to false and can be switched 
                                                to true. Thereafter it cannot be changed. true wins over false in merge.)
 
           

6. Remoting
-----------
     Akka remoting is designed for communication in a peer-to-peer fashion

	Deployee ->	   akka.tcp://Deployer@localhost:19600/user/$c
	Deployer ->         remote = "akka.tcp://DeployTarget@localhost:8090"
     
    Message received from dep	
	akka.tcp://DeployTarget@localhost:8090/remote/akka.tcp/Deploye@localhost:19600/user/echoactor/


7. I/O
	Goal for I/O implementation was to reach extreme scalability     

        IO for 
		- TCP            
		- UDP

9.UDP
-------
         - UDP is a connectionless datagram protocol.
         - Unconnected UDP
                1. SimpleSend (UdpMessage.simpleSender())
                        To just send datagrams without the need of getting a reply.
                2. Bind
                        To implement a UDP server which listens on a socket for incoming datagrams then you need to use the bind command
         - Connected UDP
                1. Using connect()
         - Multicast 

10. EventBus
-------------
         - 
